<?php

use Mini\Cms\Connections\Database\Database;
use Mini\Cms\Connections\Database\Queries\QueryManager;
use Mini\Cms\Modules\CurrentUser\CurrentUser;
use Mini\Cms\Modules\MetaTag\MetagEnum;
use Mini\Cms\Modules\MetaTag\MetaTag;
use Mini\Cms\Routing\Route;
use Mini\Modules\custom\books\src\Modal\BookCategory;
use Mini\Modules\custom\books\src\Modal\Books;
use Mini\Modules\custom\books\src\Modal\Statics;
use Symfony\Component\HttpFoundation\Request;

/**
 * Hooks implementations
 */
function books_view_data_alter(array &$variables, string $file_name): void {

    if($file_name === 'home_page.php') {
        $variables['books_count'] = get_global('books_count');
        $variables['books_recent'] = get_global('books_recent');
        $variables['books_read'] = get_global('books_read');
        $variables['books_count_percentage'] = get_global('books_count_percentage');
        $variables['books_read_percentage'] = get_global('books_read_percentage');
        $variables['books_recent_percentage'] = get_global('books_recent_percentage');
        $variables['books_recent_authors'] = get_global('books_recent_authors');
    }
}

function books_meta_data_initialize_alter(MetaTag &$metaTag, Request $request, Route $route): void
{
    $metaTag->set(MetagEnum::Title,'Study material stores');
    $route->setRouteTitle("Study material stores");
}

function books_pre_assets_build(array &$assets, string $section_name, \Mini\Cms\Controller\Route $route): void
{
    /**@var $loaded Route **/
    $loaded = $route->getLoadedRoute();
    $is_only_admin = count($loaded->getRoles()) === 1 && in_array("administrator", $loaded->getRoles());

    if ($section_name == 'head' && !$is_only_admin) {
       foreach ($assets as $key=>$asset) {
           if($asset !== '<link href="https://fonts.googleapis.com/icon?family=Material+Icons+Sharp" rel="stylesheet"/>|ext-lib' &&
               $asset !== '/themes/books/src/assets/css/style.css' &&
               $asset !== '<meta http-equiv="X-UA-Compatible" content="IE=edge">|ext-lib' &&
               $asset !== '<meta name="viewport" content="width=device-width, initial-scale=1.0">|ext-lib' &&
               $asset !== '/themes/books/src/assets/css/forms.css' &&
               $asset !== '/themes/books/src/assets/css/grids.css' &&
               $asset !== '/themes/books/src/assets/css/cards.css'){
               unset($assets[$key]);
           }
       }
    }
    if($loaded->getRouteId() === 'dc551189-d1e1-4d56-b331-2bf50956c957') {
        if ($section_name == 'head' && !$is_only_admin) {
            foreach ($assets as $key => $asset) {
                if ($asset !== '<link href="https://fonts.googleapis.com/icon?family=Material+Icons+Sharp" rel="stylesheet"/>|ext-lib' &&
                    $asset !== '/themes/books/src/assets/css/style.css' &&
                    $asset !== '<meta http-equiv="X-UA-Compatible" content="IE=edge">|ext-lib' &&
                    $asset !== '<meta name="viewport" content="width=device-width, initial-scale=1.0">|ext-lib' &&
                    $asset !== '/themes/books/src/assets/css/forms.css' &&
                    $asset !== '/themes/books/src/assets/css/grids.css') {
                    unset($assets[$key]);
                }
            }
        }
    }
    if($loaded->getRouteId() === 'a7322f9d-3dd008-877-66500-898-7875-5554-83927-5958-9000-9000--999-54848') {
        if ($section_name == 'head') {

        }
    }
}

function books_access_denied_error(): void
{
    $route = new Route('d-3dd85-7575-0-4be0-8bd4-a156b5-20b7');
    \Mini\Cms\Mini::redirect($route->replacePlaceholdersInUrl(['error_name'=>403]))->send();
}

function books_not_found_alter(string $path): void
{
    $route = new Route('d-3dd85-7575-0-4be0-8bd4-a156b5-20b7');
    \Mini\Cms\Mini::redirect($route->replacePlaceholdersInUrl(['error_name'=>404]))->send();
}

function books_post_request_alter(Request &$request): void
{
    if($request->getRequestUri() === '/user/register') {
        $email = $request->request->get('email');
        if($email) {
            $list = explode('@', $email);
            $username = $list[0];
            $list = explode('.', $username);
            $username = $list[0];
            $request->request->set('username', $username);
        }
    }
}

function books_controller_not_found()
{
    $route = new Route('d-3dd85-7575-0-4be0-8bd4-a156b5-20b7');
    \Mini\Cms\Mini::redirect($route->replacePlaceholdersInUrl(['error_name'=>500]))->send();
}

/**
 * @throws Exception
 */
function books_user_book_read(): array
{
    $conditions = [
        [
            'field' => 'statical_type',
            'operator' => '=',
            'value' => 'STATICAL_READ',
            'conjunction' => 'AND'
        ],
        [
            'field' => 'statical_user',
            'operator' => '=',
            'value' => (new CurrentUser())->id(),
            'conjunction' => 'AND'
        ],
    ];
    $statical_modal = new Statics();
    $query = new QueryManager(Database::database());
    $query->select($statical_modal->getMainTable(), 'ss');
    $query->addConditions($conditions);
    $query->orderBy($statical_modal->getMainTable().'_created', 'DESC');
    $query->execute();
    return $query->fetchAll();
}

/**
 * @throws Exception
 */
function books_books_count():int
{
    $book_modal = new Books();
    $query = new QueryManager(Database::database());
    $query->select($book_modal->getMainTable(), 'bb');
    $query->selectFields(['COUNT(book_id) AS count']);
    $query->execute();
    $result = $query->fetch();
    return $result['count'] ?? 0;
}

function books_recent_books(): bool|array
{
    $date = new DateTime('-7 days');
    $book_modal = new Books();
    $query = new QueryManager(Database::database());
    $query->select($book_modal->getMainTable(), 'bb');
    $query->addCondition($book_modal->getMainTable().'_created',$date->format('Y-m-d'),'>=');
    $query->orderBy($book_modal->getMainTable().'_created','DESC');
    $query->execute();
    return $query->fetchAll();
}

function books_recent_authors(): bool|array
{
    $recent = books_recent_books();
    $users = [];
    $users_names = [];
    foreach ($recent as $r) {
        $user = \Mini\Cms\Entities\User::load($r['books_uid']);
        if(!in_array($user->getName(), $users_names)) {
            $users[] = [
                'first_name' => $user->getFirstName(),
                'last_name' => $user->getLastName(),
                'mail' => $user->getEmail(),
                'image' => $user->getImage(),
                'joined' => time_ago($user->getCreated()),
                'profileName' => $user->getFirstname() . ' ' . $user->getLastname(),
                'imgSrc' => $user->getImage(),
                'updatedTime' => time_ago($user->getCreated()),
                'message' => $user->getFirstname() . ' ' . ' have '.count(books_on_author($user->getUid())). ' books on app'
            ];
            $users_names[] = $user->getName();
        }
    }
    return $users;
}

function books_recent_dashboard(): array
{
    $recent = books_recent_books();
    $books = [];
    $file = new \Mini\Cms\Modules\FileSystem\File();
    foreach ($recent as $r) {
        $books[] = [
            'productName' => $r['title'],
            'productNumber' => $r['isbn'],
            'payment' => $r['payment'] ?? 'free',
            'status' => $r['status'] ?? 'Inactive',
            'statusColor' => (!empty($r['status']) && $r['status'] == 'Active' ? 'primary' : 'danger'),
            'pdf' => ($r['status'] ?? 'Inactive') === 'Active' ? $file->file($r['pdf_id'])->getFilePath() : '',
            'id' => $r['book_id']
        ];
    }
    return $books;
}

function books_calculate_percentage(int $total, int $score): int|string
{
    if($total === 0 || $score === 0) {
        return 0;
    }
    $percentage = ($score / $total) * 100;
    return number_format($percentage, 2);
}

/**
 * @throws Exception
 */
function books_global_definitions_alter(): void
{
    define_global('books_read', books_user_book_read());
    define_global('books_count', books_books_count());
    define_global('books_recent', books_recent_books());
    define_global('books_count_percentage', books_calculate_percentage(10000,get_global('books_count')));
    define_global('books_read_percentage', books_calculate_percentage(get_global('books_count'), count(get_global('books_read'))));
    define_global('books_recent_percentage', books_calculate_percentage(get_global('books_count'), count(get_global('books_recent'))));
    define_global('books_recent_authors', books_recent_authors());
}

function books_on_author(int $author_id): bool|array
{
    $book_modal = new Books();
    $query = new QueryManager(Database::database());
    $query->select($book_modal->getMainTable(), 'bb');
    $query->addCondition($book_modal->getMainTable().'_uid',$author_id);
    $query->execute();
    return $query->fetchAll();
}

function books_category_books_count(int $category_id): int
{
    $book_modal = new Books();
    $query = new QueryManager(Database::database());
    $query->select($book_modal->getMainTable(), 'cc');
    $query->selectFields(['COUNT(book_id) AS count']);
    $query->addCondition('category_id',$category_id);
    $query->execute();
    return $query->fetch()['count'] ?? 0;
}

function books_active_books(): array
{
    $statical_modal = new Statics();
    $query = new QueryManager(Database::database());
    $query->select($statical_modal->getMainTable(), 'ss');
    $query->selectFields(['statical_book','title', $statical_modal->getMainTable().'_created', 'book_id','statical_active','statical_time']);
    $query->innerJoin('books', 'bb', 'ss.statical_book =bb.book_id');
    $query->orderBy('statical_active','ASC');
    $query->limit(4);
    $query->execute();
    $data = $query->fetchAll();
    $books = [];
    $bookss = new Books();
    $total = count($bookss->all()->getRecords());
    foreach ($data as $book) {
        $books[] = [
            'itemClass' => 'online',
            'colorClass'=> ($book['statical_active'] === 1) ? 'success' : 'danger',
            'title' => $book['title'],
            'icon' => 'stream',
            'created' => time_ago((new DateTime("@".$book['statical_time']))->getTimestamp()),
            'status' => ($book['statical_active'] === 1) ? 'online' : 'offline'
        ];
    }
    return $books;
}